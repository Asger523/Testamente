@page "/"
@rendermode InteractiveServer

@inject IJSRuntime JSRuntime

<PageTitle>Arvetræ</PageTitle>

<h1>Velkommen!</h1>
<br />
Ønsker du at se hvordan din arv kan blive fordelt, når du engang er væk? Så prøv vores testamente udregner.
<br />
Indskriv dig selv og dine nærmeste og se hvordan du arven bliver fordelt, og hvad du selv kan påvirke.
<br />
(Arvetræ)

<br />
<br />
<br />
<br />

@* <button class="btn btn-primary" @onclick="ToggleTestatorVisibility()">Opret testator</button> *@
@* <button class="btn btn-primary" @onclick="ToggleInheritorVisibility">Opret arving</button> *@

@* <Button class="btn btn-primary" @onclick="Build_InheritanceTree">Opdatér ArveTrae</Button> *@

<button @onclick="() => {ScrollToTestatorForm(); ToggleTestatorVisibility(null); }">Tilføj Testator</button>

@* <br />
<br />
<br />
<br /> *@

<div class="tree">
    @RenderPersonTree(@Testatorer)
</div>

<br />
<br />
<br />
<br />

<br />
<br />
<br />
<br />

<br />
<br />
<br />
<br />

<br />
<br />
<br />
<br />


<CirkelDiagram @ref="cirkelDiagram" />

@if (testatorVisible)
{
    <CreateTestator @ref="createTestatorRef" OnSubmitCallback="TestatorHandleSubmit"></CreateTestator>
}

@if (inheritorVisible)
{
    <CreateInheritor @ref="createInheritorRef" OnSubmitCallback="InheritorHandleSubmit"></CreateInheritor>
}


<script>
    function scrollToElement(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
    element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } else {
    console.warn(`Element with id '${elementId}' not found.`);
    }
    }
</script>




@code {

    // C# method that triggers the JavaScript scroll
    private async Task ScrollToTestatorForm()
    {
        await JSRuntime.InvokeVoidAsync("scrollToElement", "TestatorInputForm");
    }






    private List<Person> Testatorer = TestatorRepo.GetTestators().Select (x => x as Person).ToList();

    // Metode som auto-genererer ArveTraeet, ud fra en liste af personer
    // Den gennemgaar og opretter Personerne, og gennemgaar herefter rekursivt deres "Inheritors" (hvis de har nogen ; og derefter, deres Inheritors osv. osv.)
    private RenderFragment RenderPersonTree(List<Person> persons) => builder =>
    {
        if (persons == null || !persons.Any())
            return;

        builder.OpenElement(0, "ul");

        foreach (var person in persons)
        {
            builder.OpenElement(1, "li");

            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "member");

            builder.OpenElement(4, "span");
            builder.AddContent(5, person.Name);
            builder.CloseElement(); // Close span

            builder.OpenElement(6, "button");
            builder.AddAttribute(7, "onclick", EventCallback.Factory.Create(this, () => ToggleInheritorVisibility(person)));
            builder.AddContent(8, "Tilføj Underperson");
            builder.CloseElement(); // Close button

            builder.CloseElement(); // Close div

            if (person.Inheritors != null && person.Inheritors.Any())
            {
                // Recursive call for children
                builder.AddContent(9, RenderPersonTree(person.Inheritors.Select(x => x as Person).ToList()));
            }

            builder.CloseElement(); // Close li
        }

        builder.CloseElement(); // Close ul
    };










    // Variabel saa vi ka' skifte mellem at vise & ikke at vise testator-indtastnings-formularen
    private bool testatorVisible = false;

    private CreateTestator? createTestatorRef;
    private Person? pendingTestator;

    private void ToggleTestatorVisibility(Person theTestatorWeAreCreating)
    {
        testatorVisible = !testatorVisible;
        //StateHasChanged(); - Not needed.

        if (testatorVisible) 
        {
            pendingTestator = theTestatorWeAreCreating;
            ScrollToTestatorForm();
        }
    }

    // Metode der bliver kaldt, efter Testator-formularen's Submit-knap bliver klikket
    private async Task TestatorHandleSubmit()
    {
        ToggleTestatorVisibility(null);
        cirkelDiagram.Update_PieChart();
    }


    // Variabel saa vi ka' toggle mellem at vise & ikke at vise inheritor-indtastnings-formularen
    private bool inheritorVisible = false;

    private CreateInheritor? createInheritorRef;
    private Person? pendingInheritor;

    private void ToggleInheritorVisibility(Person thePersonWeAreCreatingInheritorFor)
    {
        inheritorVisible = !inheritorVisible;

        if (inheritorVisible)
        {
            // Opbevar personen midlertidigt, fordi der er tids-/-renderings-forskel mellem vi tilföjer den og komponenten opdaters (bör nok udspecificeres mere)
            pendingInheritor = thePersonWeAreCreatingInheritorFor;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (inheritorVisible && createInheritorRef != null && pendingInheritor != null)
        {
            // Vi saetter Testator-parent (PersonWeAreMakingAnInheritorFor) vha. vores 'gemte udgave' (pendingInheritor)
            createInheritorRef.PersonWeAreMakingAnInheritorFor = pendingInheritor;

            // Og fjerner dens 'gemte' udgave
            pendingInheritor = null;
        }
    }

    // Metode der bliver kaldt, naar Testator-formularen's Submit-knap bliver klikket
    private async Task InheritorHandleSubmit()
    {
        ToggleInheritorVisibility(null);
    }






    // Vores cirkelDiagram reference, saa vi ka' -- ja, ved faktisk ikke hvoffor den er her :/ To be investigated
    private CirkelDiagram? cirkelDiagram = new CirkelDiagram();

}
